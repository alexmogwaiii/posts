{"version":3,"sources":["store/types.js","store/appReducer.js","store/users.js","store/posts.js","store/comments.js","store/index.js","api/api.js","api/users.js","api/posts.js","api/comments.js","store/actions.js","components/Users/Users.jsx","components/Posts/Posts.jsx","components/Post/Post.jsx","App.js","index.js"],"names":["FETCH_USERS","SET_USER_ID","FETCH_POSTS","SET_POST","EDIT_POST","DELETE_POST","SHOW_LOADER","HIDE_LOADER","FETCH_COMMENTS","initialState","loading","fetchedUsers","selectedUserId","fetchedPosts","selectedPost","deletedPost","editedPost","fetchedComments","rootReducer","combineReducers","users","state","action","type","payload","app","posts","comments","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","BASE_URL","request","resource","a","fetch","response","ok","Error","status","statusText","json","getUsers","getPosts","userId","pushPost","data","method","body","JSON","stringify","headers","resp","deletePost","postId","editPost","id","getComments","dispatch","deletePostFromServer","useStyles","makeStyles","table","minWidth","Users","classes","useDispatch","useSelector","useEffect","usersFromServer","setUser","setUserId","CircularProgress","Grid","container","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","user","scope","name","email","phone","website","to","Button","variant","onClick","Posts","useState","open","setOpen","inputTitle","setInputTitle","inputText","setInputText","handleChange","event","target","value","addPost","title","post","console","log","selectPost","setPost","handleClose","postsFromServer","fetchPosts","Container","maxWidth","color","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","margin","label","onChange","DialogActions","theme","root","width","backgroundColor","palette","background","paper","inline","display","marginRight","buttons","flexDirection","alignItems","spacing","Post","length","Typography","ButtonGroup","editPostInServer","List","comment","ListItem","ListItemAvatar","Avatar","alt","ListItemText","App","basename","path","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfee13b3.chunk.js","sourcesContent":["export const FETCH_USERS = 'USERS/LOAD_USERS';\nexport const SET_USER_ID = 'USERS/SET_USER_ID';\n\nexport const FETCH_POSTS = 'POSTS/LOAD_POSTS';\nexport const SET_POST = 'POSTS/SET_POST_ID';\nexport const EDIT_POST = 'POSTS/EDIT_POST';\nexport const DELETE_POST = 'POSTS/DELETE_POST';\n\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\n\nexport const FETCH_COMMENTS = 'COMMENTS/LOAD_COMMENTS';\n","import { HIDE_LOADER, SHOW_LOADER } from './types';\n\nconst initialState = {\n  loading: false,\n};\n\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_LOADER:\n      return {\n        ...state, loading: true,\n      };\n    case HIDE_LOADER:\n      return {\n        ...state, loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { FETCH_USERS, SET_USER_ID } from './types';\n\nconst initialState = {\n  fetchedUsers: [],\n  selectedUserId: null,\n};\n\nexport const usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS:\n      return { ...state, fetchedUsers: action.payload };\n    case SET_USER_ID:\n      return { ...state, selectedUserId: action.payload };\n    default:\n      return state;\n  }\n};\n","import { FETCH_POSTS, SET_POST, DELETE_POST, EDIT_POST } from './types';\n\nconst initialState = {\n  fetchedPosts: [],\n  selectedPost: {},\n  deletedPost: null,\n  editedPost: null,\n};\n\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return { ...state, fetchedPosts: action.payload };\n    case SET_POST:\n      return { ...state, selectedPost: action.payload };\n    case DELETE_POST:\n      return { ...state, deletedPost: action.payload };\n    case EDIT_POST:\n      return { ...state, editedPost: action.payload };\n    default:\n      return state;\n  }\n};\n","import { FETCH_COMMENTS } from './types';\n\nconst initialState = {\n  fetchedComments: [],\n};\n\nexport const commentsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_COMMENTS:\n      return { ...state, fetchedComments: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { appReducer } from './appReducer';\nimport { usersReducer } from './users';\nimport { postsReducer } from './posts';\nimport { commentsReducer } from './comments';\n\nexport const rootReducer = combineReducers({\n  users: usersReducer,\n  app: appReducer,\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk,\n  ),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n));\n/* eslint-enable */\n\nexport default store;\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const request = async(resource) => {\n  try {\n    const response = await fetch(`${BASE_URL}${resource}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status}-${response.statusText}`);\n    }\n\n    return response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('users');\n\n  return users;\n};\n","import { request, BASE_URL } from './api';\n\nexport const getPosts = async(userId) => {\n  const posts = await request(`posts?userId=${userId}`);\n\n  return posts;\n};\n\nexport const pushPost = async(data) => {\n  const resp = await fetch(`${BASE_URL}posts`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return resp.json();\n};\n\nexport const deletePost = async(postId) => {\n  const resp = await fetch(`${BASE_URL}posts/${postId}`, {\n    method: 'DELETE',\n  });\n\n  return resp.json();\n};\n\nexport const editPost = async(data) => {\n  const resp = await fetch(`${BASE_URL}posts/${data.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return resp.json();\n};","import { request, BASE_URL } from './api';\n\nexport const getComments = async(postId) => {\n  const comments = await request(`comments?postId=${postId}`);\n\n  return comments;\n};\n","import { FETCH_USERS, SHOW_LOADER, HIDE_LOADER,\n  FETCH_POSTS, SET_USER_ID, SET_POST, FETCH_COMMENTS,\n  DELETE_POST,\n  EDIT_POST } from './types';\n\nimport { getUsers } from '../api/users';\nimport { getPosts, deletePost as deletePostFromServer,\n  editPost as editPostInServer } from '../api/posts';\nimport { getComments } from '../api/comments';\n\nexport function fetchUsers() {\n  return async(dispatch) => {\n    dispatch(showLoader());\n    const usersFromServer = await getUsers();\n\n    dispatch({ type: FETCH_USERS, payload: usersFromServer });\n    dispatch(hideLoader());\n  };\n}\n\nexport function setUserId(id) {\n  return {\n    type: SET_USER_ID,\n    payload: id,\n  };\n}\n\nexport function fetchPosts(userId) {\n  return async(dispatch) => {\n    const postsFromServer = await getPosts(userId);\n\n    dispatch({ type: FETCH_POSTS, payload: postsFromServer });\n  };\n}\n\nexport function setPost(post) {\n  return {\n    type: SET_POST,\n    payload: post,\n  };\n}\n\nexport function showLoader() {\n  return {\n    type: SHOW_LOADER,\n  };\n}\n\nexport function hideLoader() {\n  return {\n    type: HIDE_LOADER,\n  };\n}\n\nexport function fetchComments(postId) {\n  return async(dispatch) => {\n    const usersFromServer = await getComments(postId);\n\n    dispatch({ type: FETCH_COMMENTS, payload: usersFromServer });\n  };\n}\n\nexport function deletePost(postId) {\n  return async(dispatch) => {\n    const deletedPost = await deletePostFromServer(postId);\n\n    dispatch({ type: DELETE_POST, payload: deletePost });\n  };\n}\n\nexport function editPost(data) {\n  return async(dispatch) => {\n    const editedPost = await editPostInServer(data);\n\n    dispatch({ type: EDIT_POST, payload: editedPost });\n\n    console.log(editedPost);\n  };\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { fetchUsers, setUserId } from '../../store/actions';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst Users = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.users.fetchedUsers);\n  const loading = useSelector(state => state.app.loading);\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  const setUser = (id) => {\n    dispatch(setUserId(id));\n  };\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Grid container>\n      <h1 className=\"title\">\n        Users\n      </h1>\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell align=\"right\">Email</TableCell>\n              <TableCell align=\"right\">Phone</TableCell>\n              <TableCell align=\"right\">Website</TableCell>\n              <TableCell align=\"right\">Posts</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {users.map(user => (\n              <TableRow key={user.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {user.name}\n                </TableCell>\n                <TableCell align=\"right\">{user.email}</TableCell>\n                <TableCell align=\"right\">{user.phone}</TableCell>\n                <TableCell align=\"right\">{user.website}</TableCell>\n                <TableCell align=\"right\">\n                  <Link to=\"/posts\">\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => {\n                        setUser(user.id);\n                      }}\n                    >\n                      Posts\n                    </Button>\n                  </Link>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Grid>\n  );\n};\n\nexport default Users;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport Paper from '@material-ui/core/Paper';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Container from '@material-ui/core/Container';\n\nimport { fetchPosts, setPost } from '../../store/actions';\nimport { pushPost } from '../../api/posts';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst Posts = () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const userId = useSelector(state => state.users.selectedUserId);\n  const posts = useSelector(state => state.posts.fetchedPosts);\n  const [inputTitle, setInputTitle] = useState('');\n  const [inputText, setInputText] = useState('');\n\n  const handleChange = (event) => {\n    const { id, value } = event.target;\n\n    switch (id) {\n      case 'title':\n        setInputTitle(value);\n        break;\n      case 'text':\n        setInputText(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const addPost = async() => {\n    try {\n      const post = await pushPost({\n        title: inputTitle,\n        body: inputText,\n        userId,\n      });\n\n      console.log(post);\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n\n  const selectPost = (post) => {\n    dispatch(setPost(post));\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleAdd = () => {\n    addPost();\n    handleClose();\n  };\n\n  useEffect(() => {\n    dispatch(fetchPosts(userId));\n  }, []);\n\n  return (\n    <Grid container>\n\n      <h1 className=\"title\">\n        Posts\n      </h1>\n      <Container maxWidth=\"lg\">\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n          Add new\n        </Button>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"form-dialog-title\"\n          maxWidth=\"xl\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Add new post</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Write here the title of your post\n            </DialogContentText>\n            <TextField\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Title\"\n              type=\"text\"\n              onChange={handleChange}\n            />\n            <DialogContentText>\n              Write here the text of your post\n            </DialogContentText>\n            <TextField\n              margin=\"dense\"\n              id=\"text\"\n              label=\"Text\"\n              type=\"text\"\n              onChange={handleChange}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={handleAdd} color=\"primary\">\n              Add\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Titile</TableCell>\n              <TableCell align=\"right\">Body</TableCell>\n              <TableCell align=\"right\">Detail</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {posts.map(post => (\n              <TableRow key={post.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {post.title}\n                </TableCell>\n                <TableCell align=\"right\">{post.body}</TableCell>\n                <TableCell align=\"right\">\n                  <Link to={`/post/${post.id}`}>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => {\n                        selectPost(post);\n                      }}\n                    >\n                      Detail\n                    </Button>\n                  </Link>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Grid>\n  );\n};\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { Container, Grid } from '@material-ui/core';\nimport { deletePost, fetchComments, editPost } from '../../store/actions';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '80%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'inline',\n    marginRight: '15px',\n  },\n  buttons: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst Post = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const comments = useSelector(state => state.comments.fetchedComments);\n  const post = useSelector(state => state.posts.selectedPost);\n  const [open, setOpen] = useState(false);\n  const [inputTitle, setInputTitle] = useState('');\n  const [inputText, setInputText] = useState('');\n\n  useEffect(() => {\n    if (!comments.length) {\n      dispatch(fetchComments(post.id));\n    }\n  }, []);\n\n  const deletePostHandler = () => {\n    dispatch(deletePost(post.id));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleChange = (event) => {\n    const { id, value } = event.target;\n\n    switch (id) {\n      case 'title':\n        setInputTitle(value);\n        break;\n      case 'text':\n        setInputText(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = () => {\n    if (inputTitle || inputText) {\n      dispatch(editPost({\n        id: post.id,\n        title: inputTitle,\n        body: inputText,\n        userId: post.userId,\n      }));\n    }\n\n    handleClose();\n  };\n\n  return (\n    <Grid container>\n      <Container>\n        <Typography variant=\"h4\">\n          {post.title}\n        </Typography>\n        <Typography>\n          {post.body}\n        </Typography>\n        <div className={classes.buttons}>\n          <ButtonGroup color=\"primary\">\n            <Button onClick={handleClickOpen}>\n              Edit\n            </Button>\n            <Button onClick={deletePostHandler}>Delete</Button>\n          </ButtonGroup>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            maxWidth=\"xl\"\n          >\n            <DialogTitle id=\"form-dialog-title\">Edit post</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Write here the title of your post\n              </DialogContentText>\n              <TextField\n                margin=\"dense\"\n                id=\"title\"\n                label=\"Title\"\n                type=\"text\"\n                onChange={handleChange}\n              />\n              <DialogContentText>\n                Write here the text of your post\n              </DialogContentText>\n              <TextField\n                margin=\"dense\"\n                id=\"text\"\n                label=\"Text\"\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button onClick={handleSubmit} color=\"primary\">\n                Add\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </Container>\n      <List className={classes.root}>\n        {comments.map(comment => (\n          <ListItem key={comment.id} alignItems=\"center\">\n            <ListItemAvatar>\n              <Avatar alt=\"Remy Sharp\" />\n            </ListItemAvatar>\n            <ListItemText>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {comment.name}\n              </Typography>\n              <Typography>\n                {comment.body}\n              </Typography>\n              <Typography>\n                {comment.email}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        ))}\n      </List>\n    </Grid>\n  );\n};\n\nexport default Post;","import React from 'react';\nimport { Route, Redirect, HashRouter } from 'react-router-dom';\nimport Users from './components/Users/Users';\nimport Posts from './components/Posts/Posts';\nimport Post from './components/Post/Post';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Route path=\"/users\" component={Users} />\n        <Route path=\"/posts/\" component={Posts} />\n        <Route path=\"/post/:postId\" component={Post} />\n        <Redirect from=\"/\" to=\"/users\" />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n  ,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}